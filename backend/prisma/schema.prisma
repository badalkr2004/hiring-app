// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  email      String    @unique
  password   String
  firstName  String
  lastName   String
  role       UserRole  @default(USER)
  avatar     String?
  phone      String?
  location   String?
  skills     String[]
  experience String?
  resume     String?
  bio        String?
  education  String?
  linkedIn   String?
  github     String?
  portfolio  String?
  isActive   Boolean   @default(true)
  isVerified Boolean   @default(false)
  lastLogin  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  applications        Application[]
  company             Company?
  refreshTokens       RefreshToken[]
  chatParticipants    ChatParticipant[]
  messages            Message[]
  createdCommunities  Community[]
  communityMembers    CommunityMember[]
  sentInvitations     CommunityInvitation[] @relation("SentInvitations")
  receivedInvitations CommunityInvitation[] @relation("ReceivedInvitations")

  // chat realtions

  @@map("users")
}

model Company {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  website     String?
  logo        String?
  size        String?
  industry    String?
  location    String?
  foundedYear Int?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs   Job[]

  @@map("companies")
}

model Job {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  requirements String[]
  benefits     String[]
  location     String
  type         JobType
  category     String
  salary       String
  status       JobStatus @default(ACTIVE)
  featured     Boolean   @default(false)
  views        Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  expiresAt    DateTime?

  // Relations
  companyId    String        @db.ObjectId
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("jobs")
}

model Application {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  status      ApplicationStatus @default(PENDING)
  coverLetter String?
  resume      String?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId  String @db.ObjectId
  job    Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@map("applications")
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// chat schemas 

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      ChatType @default(DIRECT)
  name      String? // For group chats/communities
  avatar    String? // For group chats/communities
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  participants ChatParticipant[]
  messages     Message[]
  communityId  String?           @db.ObjectId
  community    Community?        @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@map("chats")
}

model ChatParticipant {
  id         String              @id @default(auto()) @map("_id") @db.ObjectId
  role       ChatParticipantRole @default(MEMBER)
  joinedAt   DateTime            @default(now())
  lastReadAt DateTime?
  isActive   Boolean             @default(true)

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatId String @db.ObjectId
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
  @@map("chat_participants")
}

model Message {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  type      MessageType @default(TEXT)
  fileUrl   String?
  fileName  String?
  edited    Boolean     @default(false)
  editedAt  DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chatId   String @db.ObjectId
  chat     Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Community {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  avatar      String?
  banner      String?
  type        CommunityType @default(PUBLIC)
  category    String?
  rules       String[]
  memberCount Int           @default(0)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  creatorId   String                @db.ObjectId
  creator     User                  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  members     CommunityMember[]
  chats       Chat[]
  invitations CommunityInvitation[]

  @@map("communities")
}

model CommunityMember {
  id       String              @id @default(auto()) @map("_id") @db.ObjectId
  role     CommunityMemberRole @default(MEMBER)
  joinedAt DateTime            @default(now())
  isActive Boolean             @default(true)

  // Relations
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String    @db.ObjectId
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@map("community_members")
}

model CommunityInvitation {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  status    InvitationStatus @default(PENDING)
  message   String?
  expiresAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  communityId String    @db.ObjectId
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  inviterId   String    @db.ObjectId
  inviter     User      @relation("SentInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
  inviteeId   String    @db.ObjectId
  invitee     User      @relation("ReceivedInvitations", fields: [inviteeId], references: [id], onDelete: Cascade)

  @@unique([communityId, inviteeId])
  @@map("community_invitations")
}

enum UserRole {
  USER
  COMPANY
  ADMIN
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
  INTERNSHIP
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
  EXPIRED
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  REJECTED
  HIRED
}

// chat enums 
enum ChatType {
  DIRECT
  GROUP
  COMMUNITY
}

enum ChatParticipantRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum CommunityType {
  PUBLIC
  PRIVATE
  INVITE_ONLY
}

enum CommunityMemberRole {
  CREATOR
  ADMIN
  MODERATOR
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}
